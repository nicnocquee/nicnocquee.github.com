<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NICNOCQUEE</title>
    <description>Blog about iOS, Programming, Japan, or Random Stuff.
</description>
    <link>http://www.nicnocquee.com/</link>
    <atom:link href="http://www.nicnocquee.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 20 Jan 2016 21:50:31 +0100</pubDate>
    <lastBuildDate>Wed, 20 Jan 2016 21:50:31 +0100</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Build cocos2d-x fat static library</title>
        <description>&lt;p&gt;Cocos2d-x is a fantastic game development framework. But using Xcode to build a cocos2d-x game wastes a lot of time because Xcode re-compiles the cocos2d-x source codes every time we build the game. And there are 834 source files! I have googled around but could not find the way to tell Xcode to not recompile all the time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/cocos2d-x-slow-compile.png&quot; alt=&quot;Slow compilation in Xcode for cocos2d-x&quot;&gt;&lt;/p&gt;

&lt;p&gt;The solution is to create a fat static library of the Cocos2d-x once then use it in any number of our game projects. Here&amp;#39;s how to do it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First download or clone the cocos2d-x from &lt;a href=&quot;https://github.com/cocos2d/cocos2d-x&quot;&gt;Github&lt;/a&gt; if you haven&amp;#39;t done it.&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;&amp;lt;cocos2d-x_directory&amp;gt;/build&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Create a shell script file using your favorite text editor, let&amp;#39;s call it &lt;code&gt;buildstaticlib.sh&lt;/code&gt;, and fill it up with the following code. &lt;script src=&quot;https://gist.github.com/nicnocquee/9dc4c4a128d7c0bafe23.js&quot;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;li&gt;Make the script executable. &lt;code&gt;chmod +x buildstaticlib.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the script: &lt;code&gt;./buildstaticlib.sh cocos2d_libs.xcodeproj &amp;quot;libcocos2d iOS&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Plug the charger of your Macbook then go to the gym or have lunch or something, because it will take quiet some time to create the static library.&lt;/li&gt;
&lt;li&gt;Once the script is completed, you will have a &lt;code&gt;libcocos2d iOS.a&lt;/code&gt; file in the directory, which you can use in all your cocos2d-x projects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/libcocos2dios-xctool.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now that you have the static library, you can delete the &lt;code&gt;cocos2d_libs.xcodeproj&lt;/code&gt; from your project. Then go to &lt;code&gt;Build Settings&lt;/code&gt;, and add &lt;code&gt;&amp;lt;path_to_libcocos2d iOS.a&amp;gt;&lt;/code&gt; to &lt;code&gt;Other Linker Flags&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/delete-cocos2d-proj.jpeg&quot; alt=&quot;Remove cocos2d_libs.xcodeproj&quot;&gt;&lt;/p&gt;

&lt;p&gt;Build and run your project and enjoy the fast compilation.&lt;/p&gt;

&lt;p&gt;PS: If you are using &lt;a href=&quot;https://github.com/facebook/xctool&quot;&gt;xctool&lt;/a&gt;, simply replace all &lt;code&gt;xcodebuild&lt;/code&gt; occurrences with &lt;code&gt;xctool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;PPS: You can copy &lt;code&gt;libcocos2d iOS.a&lt;/code&gt; to your project folder and commit it to your repo so that your team can build and run the project immediately.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jan 2016 19:29:17 +0100</pubDate>
        <link>http://www.nicnocquee.com/2016/01/20/build-cocos2d-x-fat-static-library.html</link>
        <guid isPermaLink="true">http://www.nicnocquee.com/2016/01/20/build-cocos2d-x-fat-static-library.html</guid>
        
        
      </item>
    
      <item>
        <title>Organize Photos via Command Line</title>
        <description>&lt;p&gt;I am using a Synology NAS at home to back up all photos from my iPhone using Synology&amp;#39;s DS Photo app. It&amp;#39;s fairly simple since I just need to specify a destination folder in the NAS, and the app will automatically back up photos to that directory. But they are not organized: thousands of photos inside a directory. Fortunately, Synology has a web app called Photo Station to browse photos in the NAS. Unfortunately, it&amp;#39;s not so easy to browse photos by month even though it has a Timeline View because it only shows a few photos for each month. So I figured I&amp;#39;d organize the photos by grouping them into folders.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/photo-station.png&quot; alt=&quot;Photo Station Timeline View showing only view photos per month&quot;&gt;&lt;/p&gt;

&lt;p&gt;I remember &lt;a href=&quot;https://twitter.com/jmathai&quot;&gt;Jaisen Mathai&lt;/a&gt; created &lt;a href=&quot;https://github.com/jmathai/elodie.git&quot;&gt;Elodie, a personal EXIF-based photo, video, and audio assistant to help organizing photos&lt;/a&gt;. But when I wanted to organize my photos, I didn&amp;#39;t have internet at that time to download Elodie. So I needed to improvise a little bit and ended up with a small shell script to group my photos based on their taken date. You only need ImageMagick for this script.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/nicnocquee/5a24bd6ac8b92cceab33.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;To use the script, simply copy this script to the directory containing the photos, then run it: &lt;code&gt;./organize_photos.sh .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/organize-photos-command-line.png&quot; alt=&quot;Script in action&quot;&gt;&lt;/p&gt;

&lt;p&gt;What the script does is basically loop through all the image files (png,jpg,jpeg) in the given directory, use ImageMagick&amp;#39;s &lt;code&gt;identify&lt;/code&gt; to extract the image&amp;#39;s metadata, then use &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; to get the year and month of the image&amp;#39;s taken date from the EXIF. After that, it just creates the directory if needed and moves the image to the directory. If there&amp;#39;s no EXIF data, the images will be moved to &lt;code&gt;Unknown&lt;/code&gt; folder.&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jan 2016 10:00:14 +0100</pubDate>
        <link>http://www.nicnocquee.com/2016/01/13/organize-photos-via-command-line.html</link>
        <guid isPermaLink="true">http://www.nicnocquee.com/2016/01/13/organize-photos-via-command-line.html</guid>
        
        
      </item>
    
      <item>
        <title>The Making of Nori for Mac</title>
        <description>&lt;p&gt;I recently announced &lt;a href=&quot;https://medium.com/@nicnocquee/one-week-app-making-challenge-9e47a1aac9f3#.8dbxxtqtd&quot;&gt;Nori for Mac as part of weekly app challenge&lt;/a&gt;. &lt;a href=&quot;http://www.delightfuldev.com/nori/&quot;&gt;Nori&lt;/a&gt; is a simple Mac app to instantly create photo strips by simply dragging and dropping images to Nori&amp;#39;s window. Nori is not my first Mac app; I had released &lt;a href=&quot;http://www.kaomojiapp.com&quot;&gt;Kaomoji for Mac&lt;/a&gt; and &lt;a href=&quot;http://www.delightfuldev.com/tiny/&quot;&gt;Tiny for Mac&lt;/a&gt; before. However, both Kaomoji and Tiny are not window-based Mac app. On the other hand, Nori is a window-based application which gave me the opportunity to learn the complexity of making a Mac app with user interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/nori-icon.png&quot; alt=&quot;Nori for Mac icon&quot;&gt;&lt;/p&gt;

&lt;p&gt;In this post, I will share some interesting stuff I encountered when developing Nori.&lt;/p&gt;

&lt;h1&gt;AppDelegate in Mac is clueless about the UI&lt;/h1&gt;

&lt;p&gt;When creating a new iOS project in Xcode, we will get a reference to &lt;code&gt;window&lt;/code&gt; in &lt;code&gt;AppDelegate&lt;/code&gt; class, while a Mac app does not have &lt;code&gt;window&lt;/code&gt; property. It feels like the AppDelegate in Mac does not know even what the initial window is. This is probably due to the fact that a Mac app can have multiple windows.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// AppDelegate in iOS&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppDelegate&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;UIResponder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIApplicationDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// AppDelegate in OSX&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;AppDelegate.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppDelegate&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;applicationDidFinishLaunching:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNotification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aNotification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Insert code here to initialize your application&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;applicationWillTerminate:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNotification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aNotification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Insert code here to tear down your application&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Nori&amp;#39;s case, I need to the app to generate photo strips when the app receive user-selected images from Finder. When the user click &lt;code&gt;Create Photostrip&lt;/code&gt; from Finder&amp;#39;s contextual menu (right click), the system will call a registered method in Nori. Inside this method, the app will fetch the selected file URLs and generate photo strip from the image files.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;photoStripFromImage:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSPasteboard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pboard&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userData:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;NSPasteboardURLReadingFileURLsOnlyKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;numberWithBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                               &lt;span class=&quot;nl&quot;&gt;NSPasteboardURLReadingContentsConformToTypesKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSImage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileURLs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pboard&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;readObjectsForClasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileURLs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pboard&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;propertyListForType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSFilenamesPboardType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// generate photo strip from files&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I need to pass this file URLs to the view controller who is responsible in displaying the generated photo strip. In iOS, I can simply get the root view controller like so.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But the problem was there&amp;#39;s no straight forward way to tell the view controller about these files. There are several ways to solve this, but I chose to disable the &amp;quot;magic&amp;quot; of storyboard by unchecking the &amp;quot;Is Initial Controller&amp;quot; in the main storyboard. Then I create the window programmatically in AppDelegate&amp;#39;s &lt;code&gt;applicationDidFinishLaunching&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;applicationDidFinishLaunching:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNotification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aNotification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;NSStoryboard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainStoryBoard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSStoryboard&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;storyboardWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Main&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MainWindowController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windowController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainStoryBoard&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;instantiateControllerWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;mainWindowController&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainWindowController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainWindowController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;makeKeyAndOrderFront&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windowController&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;showWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This way, the AppDelegate can refer to the main window controller and &amp;quot;speak&amp;quot; to it when the app receives images.&lt;/p&gt;

&lt;h1&gt;NSImage size is not pixel size&lt;/h1&gt;

&lt;p&gt;NSImage has a &lt;code&gt;size&lt;/code&gt; property, but unfortunately it is not the pixel size of the image. The size property returns the &lt;a href=&quot;http://stackoverflow.com/a/11877049/401544&quot;&gt;size information that is screen resolution dependent&lt;/a&gt;. To get the pixel size, we need to use &lt;code&gt;NSImageRep&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// NSImage category&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pixelSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSImageRep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;representations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;objectAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSSize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSMakeSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelsWide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelsHigh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;NSView does not have background color&lt;/h1&gt;

&lt;p&gt;In iOS, changing the background color of a &lt;code&gt;UIView&lt;/code&gt; is as simple as changing its &lt;code&gt;backgroundColor&lt;/code&gt; property. But it&amp;#39;s not that simple with NSView. I need to subclass &lt;code&gt;NSView&lt;/code&gt; and override &lt;code&gt;drawRect&lt;/code&gt; method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drawRect:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dirtyRect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;drawRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirtyRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSColor&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;colorWithDeviceWhite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setFill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBezierPath&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fillRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirtyRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;App Sandbox is annoying&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/sandbox-file-readwrite.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;While I understand the security reason for App Sandbox, I don&amp;#39;t understand why opening &lt;code&gt;Open Panel&lt;/code&gt; and &lt;code&gt;Save Panel&lt;/code&gt; to open and save files, respectively, requires read/write permission. Selecting and saving files via Open panel and save panel are &lt;em&gt;user initiated process&lt;/em&gt;. It&amp;#39;s not something the app does in the background without user&amp;#39;s knowledge. What&amp;#39;s worse than its iOS counterpart is that in Mac, the system does not show an alert to ask user for permission.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Nori for Mac is &lt;a href=&quot;https://itunes.apple.com/us/app/nori-photo-strips-creator/id1067017035?ls=1&amp;amp;mt=12&quot;&gt;now available on the Mac App Store&lt;/a&gt;. Check it out! :)&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Dec 2015 16:37:55 +0100</pubDate>
        <link>http://www.nicnocquee.com/2015/12/13/making-of-nori-for-mac.html</link>
        <guid isPermaLink="true">http://www.nicnocquee.com/2015/12/13/making-of-nori-for-mac.html</guid>
        
        
      </item>
    
      <item>
        <title>Keep on or Move On</title>
        <description>&lt;p&gt;Every time I stare at my Macbook Pro, I&amp;#39;m always amazed. This $3000 machine is beautiful. Its design is so simple, the retina display is amazing, the battery life is outstanding, and the weight is tolerable. I can smoothly code in Xcode and Eclipse while opening Pixelmator, Sketch, Mail, and Safari with many tabs. It always inspires me to create something as amazing as this computer. And so I did create things. It&amp;#39;s been almost a year since the fall of the startup I worked at and I decided to work on &lt;a href=&quot;http://www.delightfuldev.com&quot;&gt;my own apps&lt;/a&gt;. During the course of 11 months, I created 6 apps: 4 iOS only apps, 1 Mac app, and 1 iOS/Android game.&lt;/p&gt;

&lt;h1&gt;#1 Delightful for iPhone&lt;/h1&gt;

&lt;p&gt;The first app, &lt;a href=&quot;http://www.getdelightfulapp.com/&quot;&gt;Delightful for iPhone&lt;/a&gt;, is a free and open source iOS client for &lt;a href=&quot;https://github.com/photo/frontend&quot;&gt;Trovebox&lt;/a&gt; Photo service. Delightful was supported by &lt;a href=&quot;https://www.shuttleworthfoundation.org/&quot;&gt;Shuttleworth Foundation&lt;/a&gt; via &lt;a href=&quot;https://twitter.com/jmathai&quot;&gt;Jaisen Mathai&lt;/a&gt;, the founder of Trovebox.&lt;/p&gt;

&lt;h1&gt;#2 Lovely for iPhone&lt;/h1&gt;

&lt;p&gt;The second one was &lt;a href=&quot;http://www.getlovelyapp.com/&quot;&gt;Lovely for iPhone&lt;/a&gt;, which is an alternative to iOS&amp;#39; Photos app. I made it because I wasn&amp;#39;t satisfied with the Photos app. It uses tab navigation so that you can quickly and efficiently browse photos on your iPhone, GIF viewer and maker, advanced photo editor powered by Adobe, photostrip creator, multiple photos resize, and many more.&lt;/p&gt;

&lt;h1&gt;#3 Deep for iPhone&lt;/h1&gt;

&lt;p&gt;The third one is &lt;a href=&quot;http://www.getdeepapp.com/&quot;&gt;Deep for iPhone&lt;/a&gt; which was inspired by Pablo from Buffer. It allows you to create a captivating social media photos by using one of free and beautiful photos and add text on it. I have a plan to add a search feature and more photos in the future. Someday..&lt;/p&gt;

&lt;h1&gt;#4 Tiny for Mac&lt;/h1&gt;

&lt;p&gt;The fourth app has an interesting story. I made a Mac app on a weekend called &lt;a href=&quot;http://www.delightfuldev.com/tiny&quot;&gt;Tiny for Mac&lt;/a&gt;. It is a tiny app that runs in the background and renames the screenshot file you take on your Mac based on the front running application. I thought it was cool to have something like that. After releasing it for free and posting it on &lt;a href=&quot;https://www.producthunt.com/tech/tiny-for-mac&quot;&gt;ProductHunt&lt;/a&gt;, it was reviewed by &lt;a href=&quot;Tiny%20for%20Mac%20Got%20featured%20in%20The%20Next%20Web.%20http://thenextweb.com/apps/2015/05/26/rename-mac-screenshots-something-useful-tiny-mac/&quot;&gt;The Next Web&lt;/a&gt;. I didn&amp;#39;t ask them to review it so that was one of the surprising and exciting times of my indie life. I got so many feedback about the app itself and about the download page as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/tiny-download-page.jpg&quot; alt=&quot;Tiny for Mac Download Page Reviews&quot;&gt;&lt;/p&gt;

&lt;h1&gt;#5 Burzt for iPhone&lt;/h1&gt;

&lt;p&gt;The fifth app was very random and one of most frustrating apps I ever made. I wanted to convert burst photos to GIF so I made &lt;a href=&quot;http://www.delightfuldev.com/burzt&quot;&gt;Burzt for iPhone&lt;/a&gt;. It only took me a day to make it but was rejected twice for bogus reasons. In the end, it took a month from development to release. I admit it&amp;#39;s a little bit buggy at this moment, but the experience with the App reviewer really turned me off to update it. However, the app was 98% Swift and I learned a lot about Swift from it. Moreover, I have some features I need in the app so I&amp;#39;m going to update it.&lt;/p&gt;

&lt;h1&gt;#6 Make9 for iOS and Android&lt;/h1&gt;

&lt;p&gt;The most recent app I made is a game for iOS and Android called &lt;a href=&quot;http://www.delightfuldev.com/make9&quot;&gt;Make9&lt;/a&gt;. I have always wanted to make a game even though I&amp;#39;m not an avid gamer. You can read more about how Make9 came to be &lt;a href=&quot;http://www.nicnocquee.com/ios/game/android/2015/10/23/0-to-first-ios-android-game-in-68-days.html&quot;&gt;here&lt;/a&gt;. I am pretty satisfied with the process of developing Make9 not only because I could learn something new, I could also involve my closest friends in it. Usually my closest friends were either not interested in the apps I made or their phones could not run the apps. But since Make9 is a game and doesn&amp;#39;t require the newest iOS, they could try it early and they gave valuable insights and feedback. I also can finally share my creation to my Indonesian friends because most of them (all?) are on Android. I also got to experience a delightful process of submitting an app to Google Play Store.  &lt;/p&gt;

&lt;h1&gt;The million dollar questions&lt;/h1&gt;

&lt;p&gt;It is almost a month since Make9 was available on Play Store, and 2 weeks on the App Store. While I enjoyed the process of making Make9, the sales and public reception of Make9 are a downer. I tried many things to spread the word about Make9 including posting it in &lt;a href=&quot;https://www.producthunt.com/games/make9&quot;&gt;ProductHunt&lt;/a&gt;, contacting some websites, posting it on forums, and telling people one by one. I don&amp;#39;t have the budget to pay for Facebook/Google/Twitter ads.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/make9-stats.jpg&quot; alt=&quot;Make9 Installs on iOS and Android&quot;&gt;&lt;/p&gt;

&lt;p&gt;Sam Altman recently wrote on &lt;a href=&quot;http://playbook.samaltman.com&quot;&gt;Startup Playbook&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your goal as a startup is to make something users love. If you do that, then you have to figure out how to get a lot more users. But this first part is critical—think about the really successful companies of today. They all started with a product that their early users loved so much they told other people about it. If you fail to do this, you will fail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That paragraph has been making me think about what I should do with Make9. I can count with my fingers the number of players who share Make9 in social media and all of them are my friends. &lt;em&gt;Does it mean users don&amp;#39;t love or care about Make9? So does it fail already?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The metrics of the game so far gave birth to this one single question which lingers at the back of my mind and bugs me all the time. &lt;em&gt;Should I keep on working on Make9 or move on to something new?&lt;/em&gt; I know it&amp;#39;s just been a short time and there are still things I could do to try to increase engagement and downloads. But &lt;em&gt;will it matter?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m going to ponder on these questions for a while longer while I&amp;#39;m busy preparing my moving out of Japan. In the mean time, if you have any advice or suggestions, let me know on Twitter or send me an &lt;a href=&quot;mailto:nico@delightfuldev.com&quot;&gt;email&lt;/a&gt;. I&amp;#39;d greatly appreciate it.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Nov 2015 03:30:49 +0100</pubDate>
        <link>http://www.nicnocquee.com/ios/game/android/2015/11/16/keep-on-or-move-on.html</link>
        <guid isPermaLink="true">http://www.nicnocquee.com/ios/game/android/2015/11/16/keep-on-or-move-on.html</guid>
        
        
        <category>ios</category>
        
        <category>game</category>
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>Make9: From Zero to First iOS Android Game in 2 months with Cocos2d-x</title>
        <description>&lt;p&gt;I have been wanting to make a game even though I&amp;#39;m a not really a gamer. I don&amp;#39;t play games much. I haven&amp;#39;t finished games I bought, like Tomb Rider on PS3, Pokemon X on 3DS, and Super Mario 3D World on Wii U. But I play many mobile games. Some of them I completed, like Monument Valley, Army of Darkness, and Tower Madness. But many I didn&amp;#39;t finish, like Angry Birds, and Infinity Blade II.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/zero-to-make9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;I started researching on how to make a game. From the beginning, I wanted the game to be cross platform, at least on Android and iOS. So SpriteKit is not an option. My choices came down to &lt;a href=&quot;http://www.cocos2d-x.org/&quot;&gt;Cocos2d-x&lt;/a&gt; and Unity. I chose to try Cocos2d-x because it seemed less intimidating at that time. And I thought Unity was for 3D games. Later I found out that you could use &lt;a href=&quot;https://unity3d.com/learn/tutorials/topics/2d-game-creation&quot;&gt;Unity for making 2D games&lt;/a&gt;. Maybe I&amp;#39;ll give it a try next time.&lt;/p&gt;

&lt;p&gt;I have no experience in making games, so I wanted to make something simple that my wife will love to play. Since she likes to play Threes!, I decided to make a number puzzle game. 68 days after committing my first commit, Make9 was finally available on the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.delightfuldev.make9&quot;&gt;Google Play Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/cocos2dx-doc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;It was pretty challenging. While cocos2d-x was easy to get started, the &lt;a href=&quot;http://cocos2d-x.org/wiki&quot;&gt;documentation&lt;/a&gt; is not really good; there are many features that are not included in the documentation. Not to mention that C++ is not really my favorite language. But it was fun to see my game run on both Android and iOS with just writing it once. In the end, aside from the code for In-App Purchase and the Ad, the code for the game is shared between iOS and Android.&lt;/p&gt;

&lt;p&gt;I also learned that using C++ in iOS is so much easier than using it in Android. In iOS, I just need to use &lt;code&gt;.mm&lt;/code&gt; extension for &lt;code&gt;.cpp&lt;/code&gt; files and I can use both C++ and Objective-C in the same file. While for Android, I need to use Java Native Interface (JNI) to bridge Java and C++. And it&amp;#39;s not a &lt;a href=&quot;/ios/android/game/2015/10/17/game-making-diary-crash-on-android-when-calling-opengl-from-java.html&quot;&gt;simple chore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/itunes-connect-stupid.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;After implementing In-App Purchase and the iAd in iOS, I submitted Make9 to the App Store. It was a terrible experience. Apple has successfully degraded the quality of iTunesConnect, which is the portal to submit apps to the App Store, every time they updated it. When I tried to submit Make9, I used Felix Krause&amp;#39;s &lt;a href=&quot;https://fastlane.tools&quot;&gt;Fastlane&lt;/a&gt; tool to upload 95 screenshots in a single command. Unfortunately, it appeared that iTunesConnect backend is not designed to handle a large number of images upload simultaneously. After Fastlane&amp;#39;s &lt;a href=&quot;https://github.com/KrauseFx/deliver&quot;&gt;deliver&lt;/a&gt; tool failed to upload the images, the backend decided to keep me away from uploading images, even from the web portal, for another day. So I waited. 10 days after I &lt;em&gt;finally&lt;/em&gt; submitted the game successfully, they rejected it because according to them, it didn&amp;#39;t have a way to restore purchases. But there was. After re-testing the game, I found out that there&amp;#39;s a bug where one of the in-app purchases cannot be restored. So it was my mistake. However, they didn&amp;#39;t actually give proper explanation of the problem. Anyway, I re-submitted and waited again. UPDATE: Apple finally approved Make9. It&amp;#39;s &lt;a href=&quot;https://itunes.apple.com/us/app/make9-number-puzzle-game/id1044061338?ls=1&amp;amp;mt=8&quot;&gt;available on the App Store now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While waiting for the second time, I started working on adding ad and implementing In-App Billing on Android. It wasn&amp;#39;t a walk in the park. Maybe because I&amp;#39;m not used to Android development, but testing In-App Billing in Android is a hellish experience. And &lt;a href=&quot;http://suda.pl/the-hell-of-testing-google-play-in-app-billing/&quot;&gt;I wasn&amp;#39;t the only one who thought that way&lt;/a&gt;. The bright side however, submitting the game to Google Play Store was a pleasure. It was easy and fast. Less than 24 hours after I submitted, the game is live on the Play Store. After receiving bug reports and some feedback from my friends, I uploaded an update and boom, it&amp;#39;s available on the store in just few hours. The way I see it, Google&amp;#39;s decision is benefiting both developers and users here.&lt;/p&gt;

&lt;p&gt;Despite of the struggles, making the game was fun! It inspired me to make more games in the future. If you have an Android phone, you can download the game from the Play Store now. I submitted Make9 to &lt;a href=&quot;https://www.producthunt.com/games/make9&quot;&gt;Product Hunt&lt;/a&gt;, so let me know what you think of the game there. （＾＿－）≡★&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Oct 2015 04:14:47 +0200</pubDate>
        <link>http://www.nicnocquee.com/ios/game/android/2015/10/23/0-to-first-ios-android-game-in-68-days.html</link>
        <guid isPermaLink="true">http://www.nicnocquee.com/ios/game/android/2015/10/23/0-to-first-ios-android-game-in-68-days.html</guid>
        
        
        <category>ios</category>
        
        <category>game</category>
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>I Don&#39;t Believe in Destiny</title>
        <description>&lt;p&gt;Actually, maybe I refuse to believe in destiny. There were millions of 23 year-olds when Mark Zuckerberg became a &lt;a href=&quot;https://en.wikipedia.org/wiki/Mark_Zuckerberg&quot;&gt;billionaire at the age of 23 as a result of Facebook&amp;#39;s success&lt;/a&gt;. I don&amp;#39;t believe that the rest of the 23 year-olds at that time were not destined to be billionaires like Mark. I do believe though in two of the laws of the universe.&lt;/p&gt;

&lt;h2&gt;The higher the success is, the fewer the people who can achieve it.&lt;/h2&gt;

&lt;p&gt;Life is like climbing a mountain. And some kind of success awaits at the top. Except there is no top. It just goes up and up. Everybody has the right to climb the mountain. Everybody has the chance to reach the top. But it&amp;#39;s in the law of nature that only a few can reach the top. It&amp;#39;s a long and hard road to get there. Gravity pulls everyone down. Some will give up along the way. Some will be satisfied reaching the middle and call it a success.&lt;/p&gt;

&lt;h2&gt;Good and bad luck occur randomly.&lt;/h2&gt;

&lt;p&gt;While everyone has the right to be successful, good luck can kick people in the ass and push them up higher in an instant. At the same time, bad luck can also trip some people off their track and make them fall so far behind. But both good and bad lucks are random. And we can respond to them in any way we want. Some people, like J.K. Rowling, didn&amp;#39;t let failures and bad luck stop them from continuing the climb to the top of the mountain. On the other hand, some people who were blessed with good luck wasted them.&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;&lt;iframe width=&quot;80%&quot; max-width=&quot;640px&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/http://www.youtube.com/watch?v=wHGqp8lz36c &quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2&gt;Note to self&lt;/h2&gt;

&lt;p&gt;Don&amp;#39;t give up because of destiny. If everyone has their destiny decided since they were born, so what&amp;#39;s the point of living? And be prepared when good or bad luck greets you.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Oct 2015 07:11:47 +0200</pubDate>
        <link>http://www.nicnocquee.com/random/2015/10/17/i-dont-believe-in-destiny.html</link>
        <guid isPermaLink="true">http://www.nicnocquee.com/random/2015/10/17/i-dont-believe-in-destiny.html</guid>
        
        
        <category>random</category>
        
      </item>
    
      <item>
        <title>Game Making Diary: Crash on Android When Calling OpenGL From Java</title>
        <description>&lt;p&gt;Continuing my struggle with &lt;a href=&quot;/ios/android/game/2015/10/14/game-making-diary-java-method-signature.html&quot;&gt;Java-C++ interoperability&lt;/a&gt;, calling a C++ function from Java is not straight forward as well. In my cocos2d-x game, I need to call a function called &lt;code&gt;showOptions&lt;/code&gt; in a C++ class from &lt;code&gt;AppActivity&lt;/code&gt; Java class when user taps on a button outside &lt;code&gt;Cocos2dxGLSurfaceView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To do this, first declare a native method &lt;code&gt;showOptions&lt;/code&gt; in AppActivity class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cocos2dxActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then in some C++ header file, we need to add the JNI declaration for &lt;code&gt;showOptions&lt;/code&gt; method with Java full-path classname. To get this, run the following from &lt;code&gt;proj.android&lt;/code&gt; directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;javah -classpath bin/classes:src org.cocos2dx.cpp.AppActivity&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That &lt;code&gt;javah&lt;/code&gt; command will create a new file called &lt;code&gt;org_cocos2dx_cpp_AppActivity.h&lt;/code&gt;. You can simply include this header in your project, or just copy the interface declaraions and paste them in your own header file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;jni.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JNIEXPORT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JNICALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Java_org_cocos2dx_cpp_AppActivity_showOptions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JNIEnv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, create the implementation of that function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;JNIEXPORT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JNICALL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Java_org_cocos2dx_cpp_AppActivity_showOptions&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JNIEnv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// call the C++ showOptions method.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NativeBridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, all you have to do is to call &lt;code&gt;AppActivity.showOptions()&lt;/code&gt; when the button is pressed.&lt;/p&gt;

&lt;p&gt;However, calling &lt;code&gt;AppActivity.showOptions()&lt;/code&gt; directly will crash the game with &lt;code&gt;call to OpenGL ES API with no current context (logged once per thread)&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;To fix this, all you have to do is to call it on a GL thread.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;optionsButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnTouchListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnTouchListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;       
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTouch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_UP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runOnGLThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                
                    &lt;span class=&quot;n&quot;&gt;AppActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;showOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Fri, 16 Oct 2015 17:57:52 +0200</pubDate>
        <link>http://www.nicnocquee.com/ios/android/game/2015/10/16/game-making-diary-crash-on-android-when-calling-opengl-from-java.html</link>
        <guid isPermaLink="true">http://www.nicnocquee.com/ios/android/game/2015/10/16/game-making-diary-crash-on-android-when-calling-opengl-from-java.html</guid>
        
        
        <category>ios</category>
        
        <category>android</category>
        
        <category>game</category>
        
      </item>
    
      <item>
        <title>How to Delete and Deactivate Google Search History</title>
        <description>&lt;p&gt;I was just wondering out of the blue if I could delete and deactivate all my Google search history. Turns out it&amp;#39;s easy. All you have to do is to go to your account&amp;#39;s &lt;a href=&quot;https://myaccount.google.com/privacy&quot;&gt;activity control page&lt;/a&gt;, and turn off the &lt;code&gt;Your searches and browsing activity&lt;/code&gt; setting to stop Google from saving your Google search activities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/google2.png&quot; alt=&quot;turn off google search activity&quot;&gt;&lt;/p&gt;

&lt;p&gt;To delete the search history, click on &lt;code&gt;Manage Activity&lt;/code&gt;, click the three vertical dots button on the top right corner of the page, and click the &lt;code&gt;Delete Options&lt;/code&gt;. After that, choose the &lt;code&gt;Advanced&lt;/code&gt; option and choose &lt;code&gt;All time&lt;/code&gt; to delete all the searches.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/google3.png&quot; alt=&quot;delete google search activity&quot;&gt;&lt;/p&gt;

&lt;p&gt;Enjoy searching safely in Google from now on! You can also disable other tracking settings, such as Location history, in your account page. I&amp;#39;m curious about how my Google experience will be now that I disable the search history setting. This could be the last time I could see my search activity insight. Thank you, Stackoverflow!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/google1.png&quot; alt=&quot;google search activity insight&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Oct 2015 12:39:27 +0200</pubDate>
        <link>http://www.nicnocquee.com/tech/2015/10/14/how-to-delete-and-deactivate-google-search-history.html</link>
        <guid isPermaLink="true">http://www.nicnocquee.com/tech/2015/10/14/how-to-delete-and-deactivate-google-search-history.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Game Making Diary: Java Method Signature</title>
        <description>&lt;p&gt;While making &lt;a href=&quot;http://www.delightfuldev.com/make9/&quot;&gt;my first cross platform game&lt;/a&gt; using Cocos2d-x CPP version, I realized that it&amp;#39;s so much easier to use C++ with Objective-C than to use C++ with Java. In iOS, I can simply name a .cpp file to .mm and include it in the project and I can call C++ or Objective-C methods right away. In Android, if I want to call a Java method from C++, I need to use JNI (Java Native Interface). For example, to call a static method named &lt;code&gt;share&lt;/code&gt; in &lt;code&gt;AppActivity&lt;/code&gt; class, I need to do it like so.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;JniMethodInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;JniHelper:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getStaticMethodInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;org/cocos2dx/cpp/AppActivity&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;share&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(Ljava/lang/String;Ljava/lang/String;)V&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jstring&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringArg1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewStringUTF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jstring&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringArg2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewStringUTF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallStaticVoidMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;methodID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringArg1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringArg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeleteLocalRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeleteLocalRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringArg1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeleteLocalRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringArg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last argument of &lt;code&gt;getStaticMethodInfo&lt;/code&gt; is the method signature of the &lt;code&gt;share&lt;/code&gt; static method. This signature must be correct or else you&amp;#39;ll get &lt;code&gt;Failed to find static method id&lt;/code&gt; error. To get this method signature, use &lt;code&gt;javap -s&lt;/code&gt; command from command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;javap -s -classpath bin/classes/org/cocos2dx/cpp/ AppActivity

&lt;span class=&quot;c&quot;&gt;#output&lt;/span&gt;
Compiled from &lt;span class=&quot;s2&quot;&gt;&amp;quot;AppActivity.java&amp;quot;&lt;/span&gt;
public class org.cocos2dx.cpp.AppActivity extends org.cocos2dx.lib.Cocos2dxActivity &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
public static void share&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;java.lang.String, java.lang.String&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    descriptor: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ljava/lang/String&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;Ljava/lang/String&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;V
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Wed, 14 Oct 2015 10:28:47 +0200</pubDate>
        <link>http://www.nicnocquee.com/ios/android/game/2015/10/14/game-making-diary-java-method-signature.html</link>
        <guid isPermaLink="true">http://www.nicnocquee.com/ios/android/game/2015/10/14/game-making-diary-java-method-signature.html</guid>
        
        
        <category>ios</category>
        
        <category>android</category>
        
        <category>game</category>
        
      </item>
    
      <item>
        <title>Add Caption to iOS Screenshots Automatically Using ImageMagick</title>
        <description>&lt;p&gt;Recently I submitted a game to the App Store. Apple allows developers to submit up to 5 screenshots for each of the activated languages and for each of the devices. There are 4 iPhone sizes and 1 iPad. That means if I activate three languages, e.g., English, Japanese, and Chinese Simplified, I will need to prepare 75 images (5 screenshots x 5 devices x 3 languages).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/fastlane-snapshot.png&quot; alt=&quot;95 screenshots generated automatically&quot;&gt;&lt;/p&gt;

&lt;p&gt;Taking screenshots from 5 different devices and 3 different languages in simulator is going to take forever. Even if you manage to do it manually, you might have to do it again if you make some changes in your app. Luckily, &lt;a href=&quot;https://twitter.com/KrauseFx&quot;&gt;Felix Krause&lt;/a&gt; created a tool called &lt;a href=&quot;https://github.com/KrauseFx/snapshot&quot;&gt;Snapshot&lt;/a&gt; which is a part of &lt;a href=&quot;https://fastlane.tools&quot;&gt;Fastlane&lt;/a&gt; to help automate taking screenshots in iOS simulator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/captioned-make9.png&quot; alt=&quot;Captioned screenshots&quot;&gt;&lt;/p&gt;

&lt;p&gt;After that, I wanted to decorate the screenshots with some simple captions. For each of the device, I prepared 5 different captions for 5 different screenshots. Doing this manually with Sketch or Photoshop will be gruelling. Luckily again, there is an awesome tool called ImageMagick. With a bit of tinkering and googling, I wrote the following script to automate the captioning.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# overlay.sh&lt;/span&gt;
find . -type f -iname &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; -print0 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -r -d &lt;span class=&quot;s1&quot;&gt;$&amp;#39;\0&amp;#39;&lt;/span&gt; line&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Captioning $line: $3&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;identify -ping -format &lt;span class=&quot;s2&quot;&gt;&amp;quot;%w&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;identify -ping -format &lt;span class=&quot;s2&quot;&gt;&amp;quot;%h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;point2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$line-tmp.png&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# create the background of caption&lt;/span&gt;
    convert &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; -fill &lt;span class=&quot;s2&quot;&gt;&amp;quot;#$2&amp;quot;&lt;/span&gt;  -draw &lt;span class=&quot;s2&quot;&gt;&amp;quot;polygon  0,$point1 0,$height $width,$height $width,$point2&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;availableHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$point2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;labelHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$availableHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;labelWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;bottomMargin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$availableHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$labelHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# overlay the background and the text to the image&lt;/span&gt;
    convert -background none -fill white -font &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Library/Fonts/Arial Black.ttf&amp;quot;&lt;/span&gt; -gravity center -size &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;labelWidth&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;x&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;labelHeight&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; caption:&lt;span class=&quot;s2&quot;&gt;&amp;quot;$3&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt; +swap -gravity south -geometry +0+&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bottomMargin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; -composite &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;-caption.png
    rm &lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then all I have to is to run it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;./overlay.sh &amp;lt;image&amp;gt; &amp;lt;bg_color_hex&amp;gt; &amp;quot;&amp;lt;caption&amp;gt;&amp;quot;
./overlay.sh &amp;quot;image1.png&amp;quot; E74C3C &amp;quot;CAPTION 1&amp;quot;
./overlay.sh &amp;quot;image2.png&amp;quot; E74C3C &amp;quot;CAPTION 2&amp;quot;
./overlay.sh &amp;quot;image3.png&amp;quot; E74C3C &amp;quot;CAPTION 3&amp;quot;
./overlay.sh &amp;quot;image4.png&amp;quot; E74C3C &amp;quot;CAPTION 4&amp;quot;
./overlay.sh &amp;quot;image5.png&amp;quot; E74C3C &amp;quot;CAPTION 5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I then make another script to run the overlay script over multiple images and texts automatically.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# overlay-batch.sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -r line &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;$line&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./overlay.sh $line&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then I created another file named &lt;code&gt;screenshot-captions&lt;/code&gt; to hold the arguments for the script above.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;image1.png&amp;quot; FDCC56 &amp;quot;Caption 1&amp;quot;
&amp;quot;image2.png&amp;quot; 21D6B2 &amp;quot;Caption 2&amp;quot;
&amp;quot;image3.png&amp;quot; FF3F57 &amp;quot;Caption 3&amp;quot;
&amp;quot;image4.png&amp;quot; 4A90E2 &amp;quot;Caption 4&amp;quot;
&amp;quot;image5.png&amp;quot; E74C3C &amp;quot;Caption 5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, all I have to do is to run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;./overlay-batch.sh screenshot-captions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sun, 11 Oct 2015 13:24:47 +0200</pubDate>
        <link>http://www.nicnocquee.com/ios/2015/10/11/add-caption-to-ios-screenshots-automatically-using-imagemagick.html</link>
        <guid isPermaLink="true">http://www.nicnocquee.com/ios/2015/10/11/add-caption-to-ios-screenshots-automatically-using-imagemagick.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
  </channel>
</rss>
